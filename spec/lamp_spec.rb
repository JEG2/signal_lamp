require_relative "spec_helper"

require_relative "../lib/signal_lamp/lamp"

describe SignalLamp::Lamp do
  let(:events_seen) { [ ] }

  it "allows you to watch for signaled events" do
    subject.watch_for("test_event") do |event_name|
      events_seen << event_name
    end
    subject.signal("test_event")
    expect(events_seen).to eq(%w[test_event])
  end

  it "does not notify you of events that don't match" do
    subject.watch_for("match") do |event_name|
      events_seen << event_name
    end
    subject.signal("match")
    subject.signal("no_match")
    expect(events_seen).to eq(%w[match])
  end

  it "understands dynamic event name matchers" do
    subject.watch_for(/\Achanged:/) do |event_name|
      events_seen << event_name
    end
    subject.signal("changed:font")
    subject.signal("changed:color")
    subject.signal("deleted:content")
    expect(events_seen).to eq(%w[changed:font changed:color])
  end

  it "passes signaled arguments to the watcher" do
    subject.watch_for("args") do |event_name, *args|
      events_seen << args
    end
    subject.signal("args")
    subject.signal("args", 1)
    subject.signal("args", 2, :three)
    expect(events_seen).to eq([[ ], [1], [2, :three]])
  end

  it "notifies all watches of matching events" do
    subject.watch_for("changed:value") do |event_name|
      events_seen << "static"
    end
    subject.watch_for(/\Achanged:/) do |event_name|
      events_seen << "dynamic"
    end
    subject.signal("changed:value")
    expect(events_seen.sort).to eq(%w[dynamic static])
  end

  it "allows you to stop watching for events by identifier" do
    subject.watch_for("identifiers", identifier: :test_watcher) do |event_name|
      events_seen << event_name
    end
    subject.signal("identifiers")
    subject.signal("identifiers")
    subject.stop_watching(:test_watcher)
    subject.signal("identifiers")
    expect(events_seen).to eq(%w[identifiers identifiers])
  end

  it "returns autogenerated identifiers" do
    identifier = subject.watch_for("generated") do |event_name|
      events_seen << event_name
    end
    subject.signal("generated")
    subject.signal("generated")
    subject.stop_watching(identifier)
    subject.signal("generated")
    expect(events_seen).to eq(%w[generated generated])
  end

  it "provides a one event shortcut" do
    subject.watch_for_one("once") do |event_name|
      events_seen << event_name
    end
    subject.signal("once")
    subject.signal("once")
    expect(events_seen).to eq(%w[once])
  end
end
